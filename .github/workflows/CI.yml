name: 'CI/ CD'

on: 
  push:
    branches: [master]
  pull_request:
    

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest] #ubuntu-latest, 
    env:
      buildVersion: 0.0.0.0 #The initial build version, calculated and updated in the script below
      buildVersion2: 0.0.0.0 #weird
      taskEnabled: "false"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
    - uses: actions/checkout@v1
    - name: Custom script to create a unique application version number for this build
      if: ${{ env.taskEnabled == 'true' }}
      run: src/BuildVersion.ps1 -ProjectFile "src/AzurePipelinesToGitHubActionsConverter.Core/AzurePipelinesToGitHubActionsConverter.Core.csproj"
    - run: |
        $ProjectFile = "src/AzurePipelinesToGitHubActionsConverter.Core/AzurePipelinesToGitHubActionsConverter.Core.csproj"
        Write-Host "Generating Build Number"

        #Get the version from the csproj file
        $xml = [Xml] (Get-Content $ProjectFile)
        $initialVersion = [Version] $xml.Project.PropertyGroup.Version
        Write-Host "Initial version read from project file: $initialVersion" 
        $splitVersion = $initialVersion -Split "\."

        #Get the build number (number of days since January 1, 2000)
        $baseDate = [datetime]"01/01/2000"
        $currentDate = $(Get-Date)
        $interval = (NEW-TIMESPAN -Start $baseDate -End $currentDate)
        $buildNumber = $interval.Days
        #Write-Host $buildNumber

        #Get the revision number (number seconds (divided by two) into the day on which the compilation was performed)
        $StartDate=[datetime]::Today
        $EndDate=(GET-DATE)
        $revisionNumber = [math]::Round((New-TimeSpan -Start $StartDate -End $EndDate).TotalSeconds / 2,0)
        #Write-Host $revisionNumber

        #Final version number, using the Major, Minor and Patch versions, and then appends build and revision number together
        $finalBuildVersion = "$($splitVersion[0]).$($splitVersion[1]).$($splitVersion[2]).$($buildNumber)$($revisionNumber.ToString("00000"))"
        #Write-Host "Major.Minor,patch,Build+Revision"
        Write-Host "Final build number: $finalBuildVersion" 
        #Writing final version number back to Github variable
        #Write-Host "Writing final version $finalBuildVersion back to Github variable"
        echo "::set-env name=buildVersion::$finalBuildVersion"
        #echo "buildVersion=$finalBuildVersion" >> $GITHUB_ENV
    - name: Set variable test
      run: |
        echo "buildVersion2=1.2.3.4" >> $GITHUB_ENV
    - name: Test variables
      run: |
        echo ${{env.buildVersion}}
        echo ${{env.buildVersion2}}
    - name: Build with dotnet
      if: ${{ env.taskEnabled == 'true' }}
      run: dotnet build src/AzurePipelinesToGitHubActionsConverter.Core/AzurePipelinesToGitHubActionsConverter.Core.csproj --configuration Release
    - name: Test with dotnet
      if: ${{ env.taskEnabled == 'true' }}
      run: dotnet test src/AzurePipelinesToGitHubActionsConverter.Tests/AzurePipelinesToGitHubActionsConverter.Tests.csproj --configuration Release
    - name: Pack with dotnet
      if: ${{ env.taskEnabled == 'true' }}
      run: dotnet pack src/AzurePipelinesToGitHubActionsConverter.Core/AzurePipelinesToGitHubActionsConverter.Core.csproj --configuration Release /p:PackageVersion=${{env.buildVersion}}
    - name: Upload nuget package back to GitHub
      uses: actions/upload-artifact@master
      if: ${{ env.taskEnabled == 'true' }}
      with:
        name: nugetPackage
        path: src/AzurePipelinesToGitHubActionsConverter.Core/bin/Release      

  NuGetPush:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
      
    steps:
    - name: Download nuget package artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: nugetPackage  
    - name: Publish nuget package to nuget.org
      run: dotnet nuget push nugetPackage\*.nupkg --api-key "${{ secrets.GHPackagesToken }}" --source "https://www.nuget.org/"
      shell: pwsh
